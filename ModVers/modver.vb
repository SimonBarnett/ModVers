' Copyright 2004, Microsoft Corporation
' Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

'--------------------------------------------------------------
' Autogenerated by XSDObjectGen version 1.4.4.1
' Schema file: EXAMPLE.xsd
' Creation Date: 02/07/2017 09:57:52
'--------------------------------------------------------------

Imports System
Imports System.Xml.Serialization
Imports System.Collections
Imports System.Xml.Schema
Imports System.ComponentModel

Namespace modver

	Public Module Declarations
		Public Const SchemaVersion As String = ""
	End Module


	<Serializable, _
	EditorBrowsable(EditorBrowsableState.Advanced)> _
	Public Class versionCollection
		Inherits ArrayList

		Public Shadows Function Add(obj As version) As version
			MyBase.Add(obj)
			Add = obj
		End Function

		Public Shadows Function Add() As version
            Add = Add(New version())
        End Function

		Public Shadows Sub Insert(index As Integer, obj As version)
			MyBase.Insert(index, obj)
		End Sub

		Public Shadows Sub Remove(obj As version)
			MyBase.Remove(obj)
		End Sub

		Default Public Shadows Property Item(ByVal index As Integer) As version
            Get
                Item = DirectCast(MyBase.Item(index), version)
            End Get
            Set(ByVal Value As version)
                MyBase.Item(index) = Value
            End Set
        End Property
	End Class

	<Serializable, _
	EditorBrowsable(EditorBrowsableState.Advanced)> _
	Public Class checkCollection
		Inherits ArrayList

		Public Shadows Function Add(obj As check) As check
			MyBase.Add(obj)
			Add = obj
		End Function

		Public Shadows Function Add() As check
            Add = Add(New check())
        End Function

		Public Shadows Sub Insert(index As Integer, obj As check)
			MyBase.Insert(index, obj)
		End Sub

		Public Shadows Sub Remove(obj As check)
			MyBase.Remove(obj)
		End Sub

		Default Public Shadows Property Item(ByVal index As Integer) As check
            Get
                Item = DirectCast(MyBase.Item(index), check)
            End Get
            Set(ByVal Value As check)
                MyBase.Item(index) = Value
            End Set
        End Property
	End Class

	<Serializable,
    EditorBrowsable(EditorBrowsableState.Advanced)>
    Public Class ColumnCollection
        Inherits ArrayList

        Public Shadows Function Add(obj As Column) As Column
            MyBase.Add(obj)
            Add = obj
        End Function

        Public Shadows Function Add() As Column
            Add = Add(New Column())
        End Function

        Public Shadows Sub Insert(index As Integer, obj As Column)
            MyBase.Insert(index, obj)
        End Sub

        Public Shadows Sub Remove(obj As Column)
            MyBase.Remove(obj)
        End Sub

        Default Public Shadows Property Item(ByVal index As Integer) As Column
            Get
                Item = DirectCast(MyBase.Item(index), Column)
            End Get
            Set(ByVal Value As Column)
                MyBase.Item(index) = Value
            End Set
        End Property
    End Class

    <Serializable,
    EditorBrowsable(EditorBrowsableState.Advanced)>
    Public Class moduleCollection
        Inherits ArrayList

        Public Shadows Function Add(obj As [module]) As [module]
            MyBase.Add(obj)
            Add = obj
        End Function

        Public Shadows Function Add() As [module]
            Add = Add(New [module]())
        End Function

        Public Shadows Sub Insert(index As Integer, obj As [module])
            MyBase.Insert(index, obj)
        End Sub

        Public Shadows Sub Remove(obj As [module])
            MyBase.Remove(obj)
        End Sub

        Default Public Shadows Property Item(ByVal index As Integer) As [module]
            Get
                Item = DirectCast(MyBase.Item(index), [module])
            End Get
            Set(ByVal Value As [module])
                MyBase.Item(index) = Value
            End Set
        End Property
    End Class



    '--------------------------------------------------
    'modver element
    '--------------------------------------------------
    <XmlRoot(ElementName:="modver", IsNullable:=False), Serializable>
    Public Class modver

        <System.Runtime.InteropServices.DispIdAttribute(-4)>
        Public Function GetEnumerator() As IEnumerator
            GetEnumerator = moduleCollection.GetEnumerator()
        End Function

        Public Function Add(ByVal obj As [module]) As [module]
            Add = moduleCollection.Add(obj)
        End Function

        <XmlIgnore()>
        Default Public ReadOnly Property Item(ByVal index As Integer) As [module]
            Get
                Item = moduleCollection(index)
            End Get
        End Property

        <XmlIgnore()>
        Public ReadOnly Property Count() As Integer
            Get
                Count = moduleCollection.Count
            End Get
        End Property

        Public Sub Clear()
            moduleCollection.Clear()
        End Sub

        Public Function Remove(ByVal index As Integer) As [module]
            Dim obj As [module]
            obj = moduleCollection(index)
            Remove = obj
            moduleCollection.Remove(obj)
        End Function

        Public Sub Remove(ByVal obj As Object)
            moduleCollection.Remove(obj)
        End Sub

        '*********************** module element ***********************
        <XmlElement(Type:=GetType([module]), ElementName:="module", IsNullable:=False, Form:=XmlSchemaForm.Qualified),
        EditorBrowsable(EditorBrowsableState.Advanced)>
        Public __moduleCollection As moduleCollection

        <XmlIgnore>
        Public Property moduleCollection As moduleCollection
            Get
                If __moduleCollection Is Nothing Then __moduleCollection = New moduleCollection()
                moduleCollection = __moduleCollection
            End Get
            Set(Value As moduleCollection)
                __moduleCollection = Value
            End Set
        End Property

        '*********************** Constructor ***********************
        Public Sub New()
        End Sub
    End Class


    '--------------------------------------------------
    'module element
    '--------------------------------------------------
    <XmlType(TypeName:="module"), Serializable>
    Public Class [module]

        <System.Runtime.InteropServices.DispIdAttribute(-4)>
        Public Function GetEnumerator() As IEnumerator
            GetEnumerator = versionCollection.GetEnumerator()
        End Function

        Public Function Add(ByVal obj As version) As version
            Add = versionCollection.Add(obj)
        End Function

        <XmlIgnore()>
        Default Public ReadOnly Property Item(ByVal index As Integer) As version
            Get
                Item = versionCollection(index)
            End Get
        End Property

        <XmlIgnore()>
        Public ReadOnly Property Count() As Integer
            Get
                Count = versionCollection.Count
            End Get
        End Property

        Public Sub Clear()
            versionCollection.Clear()
        End Sub

        Public Function Remove(ByVal index As Integer) As version
            Dim obj As version
            obj = versionCollection(index)
            Remove = obj
            versionCollection.Remove(obj)
        End Function

        Public Sub Remove(ByVal obj As Object)
            versionCollection.Remove(obj)
        End Sub

        '*********************** name attribute ***********************
        <XmlAttribute(AttributeName:="name", Form:=XmlSchemaForm.Unqualified, DataType:="string"),
        EditorBrowsable(EditorBrowsableState.Advanced)>
        Public __name As String

        <XmlIgnore>
        Public Property name As String
            Get
                name = __name
            End Get
            Set(Value As String)
                __name = Value
            End Set
        End Property

        '*********************** version element ***********************
        <XmlElement(Type:=GetType(version), ElementName:="version", IsNullable:=False, Form:=XmlSchemaForm.Qualified),
        EditorBrowsable(EditorBrowsableState.Advanced)>
        Public __versionCollection As versionCollection

        <XmlIgnore>
        Public Property versionCollection As versionCollection
            Get
                If __versionCollection Is Nothing Then __versionCollection = New versionCollection()
                versionCollection = __versionCollection
            End Get
            Set(Value As versionCollection)
                __versionCollection = Value
            End Set
        End Property

        '*********************** Constructor ***********************
        Public Sub New()
        End Sub
    End Class


    '--------------------------------------------------
    'version element
    '--------------------------------------------------
    <XmlType(TypeName:="version"), Serializable>
    Public Class version

        <System.Runtime.InteropServices.DispIdAttribute(-4)>
        Public Function GetEnumerator() As IEnumerator
            GetEnumerator = checkCollection.GetEnumerator()
        End Function

        Public Function Add(ByVal obj As check) As check
            Add = checkCollection.Add(obj)
        End Function

        <XmlIgnore()>
        Default Public ReadOnly Property Item(ByVal index As Integer) As check
            Get
                Item = checkCollection(index)
            End Get
        End Property

        <XmlIgnore()>
        Public ReadOnly Property Count() As Integer
            Get
                Count = checkCollection.Count
            End Get
        End Property

        Public Sub Clear()
            checkCollection.Clear()
        End Sub

        Public Function Remove(ByVal index As Integer) As check
            Dim obj As check
            obj = checkCollection(index)
            Remove = obj
            checkCollection.Remove(obj)
        End Function

        Public Sub Remove(ByVal obj As Object)
            checkCollection.Remove(obj)
        End Sub

        '*********************** number attribute ***********************
        <XmlAttribute(AttributeName:="number", Form:=XmlSchemaForm.Unqualified, DataType:="unsignedByte"),
        EditorBrowsable(EditorBrowsableState.Advanced)>
        Public __number As Byte

        <XmlIgnore,
        EditorBrowsable(EditorBrowsableState.Advanced)>
        Public __numberSpecified As Boolean

        <XmlIgnore>
        Public Property number As Byte
            Get
                number = __number
            End Get
            Set(Value As Byte)
                __number = Value
                __numberSpecified = True
            End Set
        End Property

        '*********************** check element ***********************
        <XmlElement(Type:=GetType(check), ElementName:="check", IsNullable:=False, Form:=XmlSchemaForm.Qualified),
        EditorBrowsable(EditorBrowsableState.Advanced)>
        Public __checkCollection As checkCollection

        <XmlIgnore>
        Public Property checkCollection As checkCollection
            Get
                If __checkCollection Is Nothing Then __checkCollection = New checkCollection()
                checkCollection = __checkCollection
            End Get
            Set(Value As checkCollection)
                __checkCollection = Value
            End Set
        End Property

        '*********************** Constructor ***********************
        Public Sub New()
        End Sub
    End Class


    '--------------------------------------------------
    'check element
    '--------------------------------------------------
    <XmlType(TypeName:="check"), Serializable>
    Public Class check

        <System.Runtime.InteropServices.DispIdAttribute(-4)>
        Public Function GetEnumerator() As IEnumerator
            GetEnumerator = checkCollection.GetEnumerator()
        End Function

        Public Function Add(ByVal obj As Column) As Column
            Add = checkCollection.Add(obj)
        End Function

        <XmlIgnore()>
        Default Public ReadOnly Property Item(ByVal index As Integer) As Column
            Get
                Item = checkCollection(index)
            End Get
        End Property

        <XmlIgnore()>
        Public ReadOnly Property Count() As Integer
            Get
                Count = checkCollection.Count
            End Get
        End Property

        Public Sub Clear()
            checkCollection.Clear()
        End Sub

        Public Function Remove(ByVal index As Integer) As Column
            Dim obj As Column
            obj = checkCollection(index)
            Remove = obj
            checkCollection.Remove(obj)
        End Function

        Public Sub Remove(ByVal obj As Object)
            checkCollection.Remove(obj)
        End Sub

        '*********************** type attribute ***********************
        <XmlAttribute(AttributeName:="type", Form:=XmlSchemaForm.Unqualified, DataType:="string"),
        EditorBrowsable(EditorBrowsableState.Advanced)>
        Public __type As String

        <XmlIgnore>
        Public Property type As String
            Get
                type = __type
            End Get
            Set(Value As String)
                __type = Value
            End Set
        End Property

        '*********************** name attribute ***********************
        <XmlAttribute(AttributeName:="name", Form:=XmlSchemaForm.Unqualified, DataType:="string"),
        EditorBrowsable(EditorBrowsableState.Advanced)>
        Public __name As String

        <XmlIgnore>
        Public Property name As String
            Get
                name = __name
            End Get
            Set(Value As String)
                __name = Value
            End Set
        End Property

        '*********************** db attribute ***********************
        <XmlAttribute(AttributeName:="db", Form:=XmlSchemaForm.Unqualified, DataType:="string"),
        EditorBrowsable(EditorBrowsableState.Advanced)>
        Public __db As String

        <XmlIgnore>
        Public Property db As String
            Get
                db = __db
            End Get
            Set(Value As String)
                __db = Value
            End Set
        End Property

        '*********************** check element ***********************
        <XmlElement(Type:=GetType(Column), ElementName:="check", IsNullable:=False, Form:=XmlSchemaForm.Qualified),
        EditorBrowsable(EditorBrowsableState.Advanced)>
        Public __checkCollection As ColumnCollection

        <XmlIgnore>
        Public Property checkCollection As ColumnCollection
            Get
                If __checkCollection Is Nothing Then __checkCollection = New ColumnCollection()
                checkCollection = __checkCollection
            End Get
            Set(Value As ColumnCollection)
                __checkCollection = Value
            End Set
        End Property

        '*********************** Constructor ***********************
        Public Sub New()
        End Sub
    End Class


    '--------------------------------------------------
    'Column element
    '--------------------------------------------------
    <XmlType(TypeName:="Column"), Serializable>
    Public Class Column

        '*********************** name attribute ***********************
        <XmlAttribute(AttributeName:="name", Form:=XmlSchemaForm.Unqualified, DataType:="string"),
        EditorBrowsable(EditorBrowsableState.Advanced)>
        Public __name As String

        <XmlIgnore>
        Public Property name As String
            Get
                name = __name
            End Get
            Set(Value As String)
                __name = Value
            End Set
        End Property

        '*********************** Constructor ***********************
        Public Sub New()
        End Sub
    End Class
End Namespace
